@page "/user-profile/{UserId}"
@using AdessibindenFrontend.Services.Abstract
@using AdessibindenFrontend.Services.Results
@using Application.Features.UserProfiles.Commands.Dtos
@using Application.Features.UserProfiles.Commands.Update
@using Application.Features.UserProfiles.Queries.GetById
@inject IUserProfileService _userProfileService




@if (isProfileLoaded)
{
    
    <div class="container-fluid">
        <h1 class="text-center mt-5">Profile</h1>

        <EditForm Model="updateUserProfileDto" OnValidSubmit="UpdateProfile" class="w-25 m-auto mt-5">
            <div class="form-floating">
                <InputText @bind-Value="updateUserProfileDto.FirstName" id="firstName" placeholder="First Name..." class="form-control mb-2" />
                <label for="floatingInput">First Name</label>
            </div>
            <div class="form-floating">
                <InputText @bind-Value="updateUserProfileDto.LastName" id="lastName" placeholder="Last Name..." class="form-control mb-2" />
                <label for="floatingInput">Last Name</label>
            </div>
            <div class="form-floating">
                <InputTextArea @bind-Value="updateUserProfileDto.Address" id="address" placeholder="Address..." class="form-control mb-2" />
                <label for="floatingInput">Address</label>
            </div>
            <div class="form-floating">
                <InputDate @bind-Value="updateUserProfileDto.BirthDate" id="birthdate" class="form-control mb-2" />
                <label for="floatingInput">Birth Date</label>
            </div>
            
            

            <button class="btn btn-primary w-100 py-2 btn-success" type="submit">Save</button>

        </EditForm>
    </div>

}


@code {
    [Parameter]
    public string UserId { get; set; }

    private int CastedUserId;
    public UpdateUserProfileDto updateUserProfileDto = new();
    private bool isProfileLoaded = false;
    public IRequestResult<GetUserProfileResponse> userProfileResponse;
    public IRequestResult<UpdatedUserProfileResponse> updatedUserProfileResponse;

    protected async override Task OnInitializedAsync()
    {
        CastedUserId = Int32.Parse(UserId);

        userProfileResponse = await _userProfileService.GetProfile(CastedUserId);
        isProfileLoaded = userProfileResponse.Success;

        SetDto(userProfileResponse);

    }

    private async Task UpdateProfile()
    {
        SetDto(userProfileResponse);

        updatedUserProfileResponse = await _userProfileService.UpdateProfile(updateUserProfileDto);

    }

    private void SetDto(IRequestResult<GetUserProfileResponse> userProfileResponse)
    {
        updateUserProfileDto.FirstName ??= userProfileResponse.Data.FirstName;
        updateUserProfileDto.LastName ??= userProfileResponse.Data.LastName;
        updateUserProfileDto.Address ??= userProfileResponse.Data.Address;
        updateUserProfileDto.UserId = CastedUserId;
        updateUserProfileDto.BirthDate ??= userProfileResponse.Data.BirthDate;
        if (updateUserProfileDto.BirthDate != null)
        {
            updateUserProfileDto.BirthDate = DateTime.SpecifyKind((DateTime)updateUserProfileDto.BirthDate, DateTimeKind.Utc);
        }
    }
}
