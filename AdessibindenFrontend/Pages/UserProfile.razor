@page "/user-profile"
@using AdessibindenFrontend.Services.Abstract
@using AdessibindenFrontend.Services.Dtos
@using AdessibindenFrontend.Services.Results
@using Application.Features.UserProfiles.Commands.Dtos
@using Application.Features.UserProfiles.Commands.Update
@using Application.Features.UserProfiles.Queries.GetByUserId
@using Microsoft.AspNetCore.Authorization
@inject IUserProfileService _userProfileService
@inject IAuthService _authService
@inject NavigationManager navigationManager
@attribute [Authorize]

@if (!Loading)
{
    
    @if (isProfileLoaded)
    {
    
        <div class="container-fluid">
            <h1 class="text-center mt-5">@UserEmail Profile</h1>

            <EditForm Model="updateUserProfileDto" OnValidSubmit="UpdateProfile" class="w-25 m-auto mt-5">
                <div class="form-floating">
                    <InputText @bind-Value="updateUserProfileDto.FirstName" id="firstName" placeholder="First Name..." class="form-control mb-2" />
                    <label for="floatingInput">First Name</label>
                </div>
                <div class="form-floating">
                    <InputText @bind-Value="updateUserProfileDto.LastName" id="lastName" placeholder="Last Name..." class="form-control mb-2" />
                    <label for="floatingInput">Last Name</label>
                </div>
                <div class="form-floating">
                    <InputTextArea @bind-Value="updateUserProfileDto.Address" id="address" placeholder="Address..." class="form-control mb-2" />
                    <label for="floatingInput">Address</label>
                </div>
                <div class="form-floating">
                    <InputDate @bind-Value="updateUserProfileDto.BirthDate" id="birthdate" class="form-control mb-2" />
                    <label for="floatingInput">Birth Date</label>
                </div>
            
                <button class="btn btn-primary w-100 py-2 btn-success" type="submit">Save</button>

            </EditForm>
        </div>

    }
    else
    {
        <div class="pt-5 pb-5 m-auto ">
        <EditForm Model="updateUserProfileDto" OnValidSubmit="CreateProfile" class="w-50 m-auto text-center">
            <h2>@ErrorMessage</h2>
            <button class="btn btn-primary w-25 mt-5 py-2 btn-primary" type="submit">Create</button>
        </EditForm>
        </div>

    }

}


@code {
    [CascadingParameter]
    public Action<bool> LoadingAction { get; set; }

    private int UserId { get; set; }
    public string UserEmail { get; set; }

    public bool Loading { get; set; } = true;

    public string ErrorMessage { get; set; }

    public UpdateUserProfileDto updateUserProfileDto = new();

    public IRequestResult<GetUserProfileResponse> userProfileResponse;
    public IRequestResult<UpdatedUserProfileResponse> updatedUserProfileResponse;

    private bool isProfileLoaded = false;

    protected async override Task OnInitializedAsync()
    {
        LoadingAction(true);

        UserId = await _authService.GetCurrentUserId();
        UserEmail = await _authService.GetCurrentUserEmail();

        userProfileResponse = await _userProfileService.GetProfile(UserId);
        isProfileLoaded = userProfileResponse.Success;

        if (isProfileLoaded)
        {
            SetDto(userProfileResponse);
        }
        else
        {
            ErrorMessage = userProfileResponse.Error.Detail;
        }
        Loading = false;


        LoadingAction(false);
    }
    private async Task CreateProfile()
    {
        var emptyUser = new CreateUserProfileDto() { UserId = UserId };
        await _userProfileService.CreateProfile(emptyUser);
        RefreshPage();
    }

    private void RefreshPage()
    {
        navigationManager.NavigateTo("/user-profile", true);
    }

    private async Task UpdateProfile()
    {
        SetDto(userProfileResponse);

        updatedUserProfileResponse = await _userProfileService.UpdateProfile(updateUserProfileDto);
    }

    private void SetDto(IRequestResult<GetUserProfileResponse> userProfileResponse)
    {
        updateUserProfileDto.FirstName ??= userProfileResponse.Data.FirstName;
        updateUserProfileDto.LastName ??= userProfileResponse.Data.LastName;
        updateUserProfileDto.Address ??= userProfileResponse.Data.Address;
        updateUserProfileDto.UserId = UserId;
        updateUserProfileDto.BirthDate ??= userProfileResponse.Data.BirthDate;
        if (updateUserProfileDto.BirthDate != null)
        {
            updateUserProfileDto.BirthDate = DateTime.SpecifyKind((DateTime)updateUserProfileDto.BirthDate, DateTimeKind.Utc);
        }
    }
}
