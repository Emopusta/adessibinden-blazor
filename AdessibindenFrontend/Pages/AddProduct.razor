@page "/add-product"

@using AdessibindenFrontend.Core.Application.Responses
@using AdessibindenFrontend.Services.Abstract
@using AdessibindenFrontend.Services.Dtos
@using AdessibindenFrontend.Services.Results
@using AdessibindenFrontend.Shared

@inject IProductCategoryService _productCategoryService
@inject ProductCategoryStateContainer _productCategoryStateContainer

<div class="container-fluid">
    @if (isLoadSuccess)
    {
        <h3 class="text-center mt-5 mb-5">AddProduct</h3>
        foreach (var category in productCategories.Data.Items)
        {
        <div class="w-25 m-auto mt-2 ">
            <div class="card border-primary mb-3" >
                    <NavLink class="nav-link text-white" href="@($"/add-product/{category.Name.ToLower()}")" @onclick="() => {productCategoryDto.Id = category.Id; productCategoryDto.Name = category.Name; _productCategoryStateContainer.SetValue(productCategoryDto);}">
                    <div class="card-body text-primary">
                        <p class="card-text text-center">@category.Name</p>
                    </div>
                </NavLink>
            </div>
        </div>
        }
    }
</div>

@code {
    [CascadingParameter]
    public Action<bool> LoadingAction { get; set; }

    private ProductCategoryDto productCategoryDto = new();

    public bool isLoadSuccess { get; set; }

    public IRequestResult<ListResponse<GetAllListProductCategoryDto>> productCategories;

    protected override async Task OnInitializedAsync()
    {
        LoadingAction(true);

        productCategories = await _productCategoryService.GetAll();
        isLoadSuccess = productCategories.Success;

        LoadingAction(false);
    }
}
