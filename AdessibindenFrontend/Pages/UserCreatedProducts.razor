@page "/user-created-products"

@using AdessibindenFrontend.Services.Abstract
@using AdessibindenFrontend.Services.Dtos
@using AdessibindenFrontend.Services.Results
@using Core.Application.Requests
@using Core.Application.Responses

@inject IAuthService _authService
@inject IProductService _productService

@if (isLoadSuccess)
{
    <div>
        <h3 class="text-center mt-5 mb-5">Favourites</h3>
        @foreach (var item in products.Data.Items)
        {
            <div class="w-25 m-auto mt-2 ">
                <div class="card border-primary mb-3">
                    <NavLink class="nav-link text-white" href="@($"/phone-product/{item.ProductId}")">
                        <div class="card-body text-primary">
                            <p class="card-text text-center">@item.Title</p>
                        </div>
                    </NavLink>
                </div>
            </div>
        }
        <nav aria-label="Page navigation example" class="d-flex justify-content-center mt-5">
            <ul class="pagination">
                <button class="btn btn-default page-item p-0" style="cursor:pointer" disabled="@(PageIndex<=0)"><a class="page-link" @onclick="() => {PageIndex--; UpdateProducts();}">Previous</a></button>
                @for (int i = 0; i < Pages; i++)
                {
                    var index = i;
                    <button class="btn page-item p-0" style="cursor:pointer"><a class="page-link" @onclick="() => {PageIndex = index;UpdateProducts();}">@(i+1) </a></button>
                }
                <button class="btn page-item p-0" style="cursor:pointer" disabled="@(PageIndex >= Pages-1)"><a class="page-link" @onclick="() => {PageIndex++; UpdateProducts();}">Next</a></button>
            </ul>
        </nav>
    </div>
}

@code {
    [CascadingParameter]
    public Action<bool> LoadingAction { get; set; }

    private bool isLoadSuccess { get; set; }
    private int PageSize { get; set; } = 5;
    private int PageIndex { get; set; } = 0;

    private IRequestResult<PaginateResponse<GetByCreatorUserIdPaginatedDto>> products;

    private int Count { get; set; }
    private int Pages { get; set; }
    private bool HasPrevious { get; set; }
    private bool HasNext { get; set; }

    private int CurrentUserId { get; set; }

    protected async override Task OnInitializedAsync()
    {
        LoadingAction(true);

        CurrentUserId = await _authService.GetCurrentUserId();
        var pageRequest = new PageRequest() { PageSize = PageSize, PageIndex = PageIndex };
        products = await _productService.GetByCreatorUserIdPaginated(pageRequest, CurrentUserId);

        Count = products.Data.Count;
        Pages = products.Data.Pages;
        HasPrevious = products.Data.HasPrevious;
        HasNext = products.Data.HasNext;

        isLoadSuccess = products.Success;

        LoadingAction(false);
    }

    private async void UpdateProducts()
    {
        var pageRequest = new PageRequest() { PageSize = PageSize, PageIndex = PageIndex };
        products = await _productService.GetByCreatorUserIdPaginated(pageRequest, CurrentUserId);
        StateHasChanged();
    }
}